# import pandas as pd
# import numpy as np
# import logging

# # ----------------------------
# # üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# # ----------------------------
# logger = logging.getLogger(__name__)
# logger.setLevel(logging.INFO)

# handler = logging.StreamHandler()
# formatter = logging.Formatter("[%(levelname)s] %(message)s")
# handler.setFormatter(formatter)
# logger.addHandler(handler)

# # ----------------------------
# # üß© –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
# # ----------------------------
# def fill_missing_values(df: pd.DataFrame) -> pd.DataFrame:
#     df = df.copy()
#     cat_cols = df.select_dtypes(include=["object", "category"]).columns
#     df[cat_cols] = df[cat_cols].fillna("Unknown")
#     logger.info(f"–ó–∞–ø–æ–ª–Ω–µ–Ω—ã –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö: {list(cat_cols)}")
#     return df

# # ----------------------------
# # üö´ –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤
# # ----------------------------
# def remove_outliers_iqr(df: pd.DataFrame, columns: list[str], factor: float = 1.5) -> pd.DataFrame:
#     df = df.copy()
#     initial_len = len(df)

#     for col in columns:
#         if col not in df.columns:
#             logger.warning(f"–°—Ç–æ–ª–±–µ—Ü '{col}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
#             continue

#         Q1 = df[col].quantile(0.25)
#         Q3 = df[col].quantile(0.75)
#         IQR = Q3 - Q1
#         low = Q1 - factor * IQR
#         high = Q3 + factor * IQR
#         before = len(df)
#         df = df[(df[col] >= low) & (df[col] <= high)]
#         after = len(df)
#         removed = before - after
#         logger.info(f"–£–¥–∞–ª–µ–Ω–æ {removed} –≤—ã–±—Ä–æ—Å–æ–≤ –ø–æ –∫–æ–ª–æ–Ω–∫–µ '{col}'")

#     logger.info(f"–ò—Ç–æ–≥–æ —É–¥–∞–ª–µ–Ω–æ {initial_len - len(df)} —Å—Ç—Ä–æ–∫ —Å –≤—ã–±—Ä–æ—Å–∞–º–∏")
#     return df

# # ----------------------------
# # üßº –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
# # ----------------------------
# def drop_unused_columns(df: pd.DataFrame, keep_columns: list[str]) -> pd.DataFrame:
#     all_cols = set(df.columns)
#     keep_cols = set(keep_columns)
#     drop_cols = list(all_cols - keep_cols)

#     logger.info(f"–£–¥–∞–ª—è–µ–º {len(drop_cols)} –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {drop_cols}")
#     return df[list(keep_cols)]

# # ----------------------------
# # üßº –ì–ª–∞–≤–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω
# # ----------------------------
# def run_pipeline(df: pd.DataFrame, outlier_columns: list[str] = None, final_features: list[str] = None) -> pd.DataFrame:
#     logger.info("üîÑ –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏...")
#     df = fill_missing_values(df)

#     if outlier_columns:
#         df = remove_outliers_iqr(df, outlier_columns)

#     if final_features:
#         df = drop_unused_columns(df, final_features)

#     logger.info(f"‚úÖ –ì–æ—Ç–æ–≤–æ. –†–∞–∑–º–µ—Ä —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞: {df.shape}")
#     return df



import pandas as pd
import numpy as np
from statsmodels.stats.stattools import medcouple
import logging
# ----------------------------
# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# ----------------------------
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

handler = logging.StreamHandler()
formatter = logging.Formatter("[%(levelname)s] %(message)s")
handler.setFormatter(formatter)
logger.addHandler(handler)

# ----------------------------
#  –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
# ----------------------------
def fill_missing_values(df: pd.DataFrame, num_strategy: str = None) -> pd.DataFrame:

    """
    –ó–∞–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ DataFrame —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        df: –ò—Å—Ö–æ–¥–Ω—ã–π DataFrame
        num_strategy: –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤:
            - 'median': –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞–Ω–æ–π
            - 'mean': –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏–º
            - 'flag': –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ –ø—Ä–æ–ø—É—Å–∫–∞ + –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞–Ω–æ–π
            - 'delete': —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏
            - None: –ø—Ä–æ–ø—É—Å–∫–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π DataFrame
    """


    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ 
    cat_cols = df.select_dtypes(include=["object", "category"]).columns
    df[cat_cols] = df[cat_cols].fillna("Unknown")
    logger.info(f"–ó–∞–ø–æ–ª–Ω–µ–Ω—ã –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö: {list(cat_cols)}")

    # –ß–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    num_cols = df.select_dtypes(include=["number"]).columns
    if num_strategy == "median":
        df[num_cols] = df[num_cols].fillna(df[num_cols].median())
    elif num_strategy == "mean":
        df[num_cols] = df[num_cols].fillna(df[num_cols].mean())
    elif num_strategy == "flag":
        for col in num_cols:
            df[f"{col}_is_na"] = df[col].isna().astype(int)
            df[col] = df[col].fillna(df[col].median())
    elif num_strategy == 'delete':
            initial_rows = len(df)
            df = df.dropna(subset=num_cols)
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ {initial_rows - len(df)} —Å—Ç—Ä–æ–∫ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏ –≤ —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö")
            return df
    else:
        df[num_cols] = df[num_cols].fillna(np.nan)
    
    logger.info(f"–ó–∞–ø–æ–ª–Ω–µ–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∏: –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ -> 'Unknown', —á–∏—Å–ª–æ–≤—ã–µ -> {num_strategy}")
    return df




# –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é IQR
# ----------------------------
def remove_outliers_iqr(df: pd.DataFrame, columns: list[str], factor: float = 1.5) -> pd.DataFrame:
    
    """
    –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–æ—Å—ã –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ IQR, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è  —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–ª–∏–∑–∫–æ–≥–æ –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        df: DataFrame –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        columns: –°–ø–∏—Å–æ–∫ —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        factor: –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤ (–æ–±—ã—á–Ω–æ 3.5)
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        DataFrame —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ –≤—ã–±—Ä–æ—Å–∞–º–∏
    """


    initial_len = len(df)

    for col in columns:
        if col not in df.columns:
            logger.warning(f"–°—Ç–æ–ª–±–µ—Ü '{col}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        Q1 = df[col].quantile(0.25)
        Q3 = df[col].quantile(0.75)
        IQR = Q3 - Q1
        low = Q1 - factor * IQR
        high = Q3 + factor * IQR
        before = len(df)
        df = df[(df[col] >= low) & (df[col] <= high)]
        after = len(df)
        removed = before - after
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ {removed} –≤—ã–±—Ä–æ—Å–æ–≤ –ø–æ –∫–æ–ª–æ–Ω–∫–µ '{col}'")

    logger.info(f"–ò—Ç–æ–≥–æ —É–¥–∞–ª–µ–Ω–æ {initial_len - len(df)} —Å—Ç—Ä–æ–∫ —Å –≤—ã–±—Ä–æ—Å–∞–º–∏")
    return df




#  –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ medcouple (–±–æ–ª–µ–µ —É—Å—Ç–æ–π—á–∏–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π)



def remove_outliers_medcouple(df: pd.DataFrame, columns: list[str], threshold: float = 3.5) -> pd.DataFrame:
    """
    –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–æ—Å—ã –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ medcouple, –∫–æ—Ç–æ—Ä—ã–π –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∞—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–º–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º–∏.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        df: DataFrame –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        columns: –°–ø–∏—Å–æ–∫ —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        threshold: –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤ (–æ–±—ã—á–Ω–æ 3.5)
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        DataFrame —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ –≤—ã–±—Ä–æ—Å–∞–º–∏
    """

    initial_len = len(df)
    
    for col in columns:
        if col not in df.columns:
            logger.warning(f"–°—Ç–æ–ª–±–µ—Ü '{col}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue
            
        data = df[col].dropna()
        if len(data) == 0:
            continue
            
        # –í—ã—á–∏—Å–ª—è–µ–º medcouple
        mc = medcouple(data.values)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–≤–∞–Ω—Ç–∏–ª–∏
        Q1 = data.quantile(0.25)
        Q3 = data.quantile(0.75)
        IQR = Q3 - Q1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Å–∏–º–º–µ—Ç—Ä–∏–∏
        if mc >= 0:
            lower_bound = Q1 - threshold * np.exp(-3.5 * mc) * IQR
            upper_bound = Q3 + threshold * np.exp(4 * mc) * IQR
        else:
            lower_bound = Q1 - threshold * np.exp(-4 * mc) * IQR
            upper_bound = Q3 + threshold * np.exp(3.5 * mc) * IQR
            
        before = len(df)
        df = df[(df[col] >= lower_bound) & (df[col] <= upper_bound)]
        after = len(df)
        removed = before - after
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ {removed} –≤—ã–±—Ä–æ—Å–æ–≤ –ø–æ –∫–æ–ª–æ–Ω–∫–µ '{col}' (medcouple={mc:.2f})")
    
    logger.info(f"–ò—Ç–æ–≥–æ —É–¥–∞–ª–µ–Ω–æ {initial_len - len(df)} —Å—Ç—Ä–æ–∫ —Å –≤—ã–±—Ä–æ—Å–∞–º–∏ (–º–µ—Ç–æ–¥ medcouple)")
    return df




#  –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤

def drop_unused_columns(df: pd.DataFrame, drop_cols: list[str]) -> pd.DataFrame:
    """
    –£–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏–∑ DataFrame –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ø–∏—é —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è —Å—Ç–æ–ª–±—Ü–∞–º–∏.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        df : pd.DataFrame
            –ò—Å—Ö–æ–¥–Ω—ã–π DataFrame –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        drop_cols : list[str]
            –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ DataFrame,
            —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –∏—Ö.
            
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        pd.DataFrame
            –ù–æ–≤—ã–π DataFrame –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤    
    """
    all_cols = set(df.columns)
    drop_cols = set(drop_cols)
    keep_cols = list(all_cols - drop_cols)

    logger.info(f"–£–¥–∞–ª—è–µ–º {len(drop_cols)} –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {drop_cols}")
    return df[list(keep_cols)]




#  –ì–ª–∞–≤–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω



def run_pipeline(df: pd.DataFrame, outlier_columns_iqr: list[str] = None, outlier_columns_medcouple: list[str] = None, columns_to_delete: list[str] = None) -> pd.DataFrame:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞–π–ø–ª–∞–π–Ω –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ:
    1. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    2. –£–¥–∞–ª–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    3. –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ (–æ–¥–Ω–∏–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏)
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        df : pd.DataFrame
            –ò—Å—Ö–æ–¥–Ω—ã–π DataFrame –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        outlier_columns_iqr : list[str], optional
            –°–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Ç–æ–¥–æ–º IQR (–¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π)
        outlier_columns_medcouple : list[str], optional
            –°–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Ç–æ–¥–æ–º MedCouple (–¥–ª—è –∞—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π)
        columns_to_delete : list[str], optional
            –°–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        pd.DataFrame
            –û—á–∏—â–µ–Ω–Ω—ã–π DataFrame –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
    """
    
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏...")
    df = df.copy()
    #–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    df = fill_missing_values(df)


    #–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫:
    if columns_to_delete:
        df = drop_unused_columns(df, columns_to_delete)

    #–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤

    if outlier_columns_iqr and outlier_columns_medcouple:
        common_cols = set(outlier_columns_iqr) & set(outlier_columns_medcouple)
        if common_cols:
            logger.warning(f"–ö–æ–ª–æ–Ω–∫–∏ {common_cols} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ–±–æ–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏")
            df1 = remove_outliers_medcouple(df, outlier_columns_medcouple)
            df2 = remove_outliers_iqr(df, outlier_columns_iqr)
            df = df.loc[df1.index.intersection(df2.index)]   
    elif outlier_columns_iqr:
        df = remove_outliers_iqr(df, outlier_columns_iqr)
    elif outlier_columns_medcouple:
        df = remove_outliers_medcouple(df, outlier_columns_medcouple)

    logger.info(f"‚úÖ –ì–æ—Ç–æ–≤–æ. –†–∞–∑–º–µ—Ä —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞: {df.shape}")
    return df

